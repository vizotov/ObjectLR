/*
 * The MIT License (MIT)
 *
 *  Copyright (c) 2018 Vladimir Izotov
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

apply plugin: 'java'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << '-Xlint:unchecked'
}
compileTestJava {
    options.encoding = "UTF-8"
}

javadoc {
    options.encoding = "UTF-8"
    options.memberLevel = JavadocMemberLevel.PUBLIC
}
repositories {
    mavenCentral()
    jcenter()
    flatDir {
        dirs 'libs', '../libs'
    }
}

dependencies {
    compile 'su.izotov:JDoubleDispatch:0.3'
    testCompile 'su.izotov:JDoubleDispatch:0.3'
    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.commons:commons-lang3:3.7'
}

apply plugin: 'idea'
idea {
  module {
    excludeDirs = [file("README.md")]
  }
}

apply plugin: 'maven'
apply plugin: 'signing'

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  sign configurations.archives
}

sourceCompatibility=1.8
targetCompatibility=1.8

group 'su.izotov'
archivesBaseName = "ObjectLR"
version '0.3'

uploadArchives {
  repositories {
    mavenDeployer {
      conf2ScopeMappings.mappings.remove(configurations.testCompile)
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Java Object Language Recognition Library'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'The Java Object Language Recognition library is the implementation of the ' +
          'language recognition feature using object-oriented approach.'
        url 'https://github.com/vizotov/ObjectLR'

        scm {
          connection 'scm:svn:https://github.com/vizotov/ObjectLR.git'
          developerConnection 'scm:svn:https://github.com/vizotov/ObjectLR.git'
          url 'https://github.com/vizotov/ObjectLR.git'
        }

        licenses {
          license {
            name 'The MIT License'
            url 'https://github.com/vizotov/ObjectLR/blob/master/LICENSE.md'
          }
        }

        developers {
          developer {
            id 'vizotov'
            name 'Vladimir Izotov'
            email 'izotov6@yandex.ru'
          }
        }
      }
    }
  }
}

buildscript {
  repositories {
    mavenCentral()
    //Needed only for SNAPSHOT versions
    //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
  }
  dependencies {
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
  }
}

apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
  packageGroup = "su.izotov" //optional if packageGroup == project.getGroup()
  //stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using
  //"packageGroup"
}

